# TP OOP

Songsheng YING
INF224

## Réponses aux questions

+ 4e, comment appelle-t'on ce type de méthode et comment faut-il les déclarer : en mettant ```virtual``` devant la signature de la fonction et ```=0``` dérrière en lui rendant virtuelle pure;
+ 4e, raison de ne pouvoir plus instancer des objets de la classe de base : parce que la classe est virtuelle à cause de la fonction virtuelle pure alors que l'instance de classe de base n'a pas cette fonction implementée.
+ 5e, proriété : polymorphisme
+ 5e, la nécessité de le faire dans C++ : avec les méthodes virtuelles
+ 5e, le tableau contient les pointeurs vers ces objets : d'une part à cause de la taille différente des sous-classes qui ne peut pas être prévue lors de la construction du tableau, d'autre part en raison du mécanisme de ```new``` qui renvoie un pointeur.
+ 5e, comparaison avec JAVA, ????
+ 6e, plein contrôle sur le tableau de durées des chapitres au sein de la classe mais pas dehors : protection de pointeur et du contenu pointé s'implémentent avec le cast de "const" sur le pointeur et le pointé.
+ 6e, défense contre la modification des contenus pointés retournés : genre ```const int * const```.
+ 7e, évite de fuite mémoire pour la classe ```Film```, dans laquelle il s'agit des allocations avec ```new```.
+ 7e, la copie d'objet copie des membres variables de l'instance, incluant les pointeurs. Sauf il faut copier les contenus pointés au lieu de copier simplement les pointeurs. (Une copie profonde)

+ 10e, pour éviter la manipulation des objets hors classe de gestion, on peut rendre les constructeurs et les destructeurs ```private```, et classe de gestion une classe ```friend``` des classes.
